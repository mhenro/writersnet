Current sprint:
IN PROGRESS - 98. Add competitions page. On this page users can add new competition then select its name and prize fund. User can add books to this competition which should take part in it. Also judges should be added. Author who wants to add book for competition should mark this book as "For competition" on the BookPropsForm.
IN PROGRESS - 117. Add "Create/Edit contest" popup form. It should appear when user click on "Create new contest" button on Contests page.
118. Add "My contests" button in the user left menu. After clicking on this button the tabpanel should appear. It should contain 2 tabs: "As participant" and "As judge".
119. Add "Contest" page where creator can send invitations to participants (by adding their books) and to judges. Each participant and judge will see notification against his "My contests" button.
120. Add new events when work with contests (join in contest, remove from contest, win in contest and so forth).


Features:
121. Add links for names in chat page.
122. Scroll screen to input comment field when clicking on Quote message button.
96. Show another title page when user is registered. On this page we can show book banners and so on.
105. Casual user can take 60% of the commission for the book. Premium user takes 90%.
21. Link webmoney merchant interface to BalancePage.
47. Add defence from overclick visitors by user (by IP or something).
48. Prepare project for stress testing. Separate beans by profiles (production and test) and so on.
49. Add stress testing for backend (use jMeter or something similar). Add scenarios for search books/authors by many users and so on.
82. Optimize Hibernate queries.
65. Add test for ChatGroupResponse class constructor.
81. Move series action from BookActions to AuthorActions in client.
15. Add login/signup via social nets (facebook and so on). Use u-login for this.
106. If author set cost for the book then it cannot delete this book anymore until this book is cost money.
107. Add logic to the "Send message" button in the AuthorFile component.
112. Add logic for sending complaints to authors. For instance, if one user bought a book from another user and then the second user removed the book then the first user can send complaint. It should some defence level.
113. Add defense for readers which already bought books. If author try to delete book which is bought for at least one user we should reject deleting request.
111. Add send message from user when he buying a gift. It could be a popup form with one input field.


Bugs:
114. Fix bug in BookReader. When updating page with paid book confirm payment form is shown even if the user is author of the book.
115. Hide "Give a gift" button for unauthorized user.
116. Fix bug with downloading book as pdf-file.
100. Fix bug with ads disappearing.
2. Fix bug with editing in login/signup form.
4. Fix bug with character encoding (ANSI) when converting a book.


Closed:
DONE - 17. Create pagination for comments
DONE - 18. Add subcomments.
DONE - 7. Add comments component to BookReader component.
DONE - 8. Add Estimation component to BookReader component. Move estimation logic to this component, remove duplicate code from other places.
DONE - 15. Create adaptive layout for main pages.
DONE - 16. Create logic for prevent vote from the same IP twice.
DONE - 1. Fix bug with ScrollToTop button (if on BookReader then go to top emmideatly).
DONE - 20. Add ssl support (with test certificate for now).
DONE - 19. Add image for default book cover.
DONE - 12. Revert birthday string on author section page.
DONE - 13. Revert lastUpdate string on author section page.
DONE - 3. Only owner should see his series when editing props of the book.
DONE - 1. Add "Edit series" button to Section page.
DONE - 3. Finish bookListItem on Books page.
DONE - 9. Add paginator to Books page.
DONE - 5. Create all Links components between pages.
DONE - 14. Write unit tests for all controllers and business logic. Do refactoring if needed.
DONE - 27. Let nginx proxying all requests to backend. It will allow to create embedded Tomcat cluster in the future.
DONE - 35. Create comments counter in "13000 views | 775 comments | 20 reviews" component on author page.
DONE - 33. Fix "Author page" button layout on authors page.
DONE - 37. Click on author avatar leads to activate author's Section page.
DONE - 38. Click on book cover leads to activate reader with current book.
DONE - 39. Click on author avatar on authors page leads to activate author's page.
DONE - 43. Click on author avatar in the Section page moves user to Options page.
DONE - 6. Create views counter in "13000 views | 775 comments | 20 reviews" functional.
DONE - 22. Add timestamp to panel "Text" in BookPropsForm for showing the last time when user loaded text.
DONE - 40. When click on "comments" in "13000 views | 775 comments | 20 reviews" component then user is moved to comments section of the book (in reader component).
DONE - 42. Go to top of the screen when changing page.
DONE - 36. Create all ratings on Ratings page.
DONE - 10. Add user policy component to signup form.
DONE - 48. Add friends page.
DONE - 49. Add adding friend mechanism.
DONE - 60. Add "Add to friend" logic to Friends page.
DONE - 52. Add messages page.
DONE - 53. Add message exchange mechanism.
DONE - 61. Add "Send message" logic to Friends page.
DONE - 62. Add counters to menus (like Friends (6) and Messages(6)).
DONE - 57. Add or delete groups page.
DONE - 25. Fix bug when deleting serie, which is used by some book. This leads to exception on serverside.
DONE - 58. Add "return to author" button on reader page.
DONE - 59. Add search logic to Friends page.
DONE - 59. Add search logic to Messages page.
DONE - 50. Add news page.
DONE - 51. Add news content generator mechanism.
DONE - 67. Add other news for news page (create book, update personal info etc).
DONE - 63. Add "read news" button logic to friends page.
DONE - 66. Add paginagion by alphabet in books page.
DONE - 67. Add paginagion by alphabet in authors page.
DONE - 70. Add vertical carousel with mouse scroll on TitlePage. 
DONE - 44. Autoupdate jwt token when user is active.
DONE - 75. Change generation id strategy to SEQUENCE, cos it's more perfomance solution for Hibernate & Postgres. Something like this:
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "book_generator")
	@SequenceGenerator(name="book_generator", sequenceName = "book_seq", allocationSize=1)
	@Column(name = "id", updatable = false, nullable = false)
	private Long id;
DONE - 79. Avoid EAGER fetching if possible.
DONE - 72. Create new table "sessions" in db with 2 columns - id and session, where id is bigint, session is a string. Session column should contain jwt token. This table will be filled in JwtFilter on every authorized call.
DONE - 73. Create sessionRepository. We should receive each jwt token and then extract expireDate from them. If token is not expired then user is active. If token is expired then delete this row from db table.
DONE - 74. If the above solution is slow then create db with 3 columns - id, username, online. And fill it in JwtFilter. Remove rows by schedule.
DONE - 32. Refactor jpa entities. FetchType.LAZY for all @ManyToOne relations. Enable transactions and add @Transactional annotation to service layers. http://in.relation.to/2016/09/28/performance-tuning-and-best-practices/
DONE - 78. Change queries to DTO projections with constructors.
DONE - 77. For unidirectional collections, Sets are the best choice because they generate the most efficient SQL statements. 
Unidirectional Lists are less efficient than a @ManyToOne association.
Bidirectional associations are usually a better choice because the @ManyToOne side controls the association.
DONE - 34. Create online/offline statuses for authors.
DONE - 26. Add Main page to the site. Something like summary of ratings and recently general news. Use bootstrap scrollspy component for this.
DONE - 71. Add first screen into the TitlePage carousel. It should be summary of the following:
          Welcome to %Site_name%!
	  We are already xxxx! (where xxx - count of authors).
	  We have xxx books!
	  Online authors - xxx! 
DONE - 84. Add second screen to the TitlePage carousel. "You can become our author or reader or even both!" 
DONE - 47. Add text to the user policy component.
DONE - 83. Fix AddNewMessage popup form.
DONE - 64. Change image fetching algorithm to reduce loading on nginx server. Instead of new Date() create a function that change date in interval (1 min at least).
DONE - 29. Add "Add review" button to book item component in Section page.
DONE - 28. Import word-like editor to create formatted text on the frontend. For instance. you can use Draft.js component - https://draftjs.org/docs/overview.html.
DONE - 36. Create reviews counter in "13000 views | 775 comments | 20 reviews" component on author page.
DONE - 91. Update SectionPage after adding new review.
DONE - 90. Fix bug with pagination on News page.
DONE - 54. Add reviews page.
DONE - 41. When click on "reviews" in "13000 views | 775 comments | 20 reviews" component user is moved to review list of that book.
DONE - 93. Add review reading page.
DONE - 94. Add defense for overclicking likes/dislikes reviews.
DONE - 55. Add discussions page.
DONE - 69. Add logic to "Restore default photo" button on OptionsPage.
DONE - 68. Add logic to "Restore default cover" button on BookPropsForm.
DONE - 2. Add changing password functional in the Options page.
DONE - 94. Change mail template.
DONE - 24. Split book text on several pages depends on amount of bytes. Added paginator to BookReader component. It's needed for perfomance on mobile devices.
DONE - 86. Add feedback page to the help page with captcha.
DONE - 95. Fix bug with News page. Currently we can see only friend news, but we should see subscription news as well.
DONE - 80. if you forget to specify that an EAGER association needs to be JOIN FETCH-ed by a JPQL query, Hibernate is going to issue a secondary select for every uninitialized association, leading to N+1 query problems.
	For example:
	comments = entityManager.createQuery(
	    "select pc " +
	    "from PostComment pc " +
	    "join fetch pc.post " +
	    "where pc.review = :review", PostComment.class)
	.setParameter("review", review)
	.getResultList();
DONE - 76. The parent-side @OneToOne association requires bytecode enhancement so that the association can be loaded lazily. 
Otherwise, the parent-side is always fetched even if the association is marked with FetchType.LAZY.
For this reason, it’s best to map @OneToOne association using @MapsId so that the PRIMARY KEY is shared between the 
child and the parent entities. When using @MapsId, the parent-side becomes redundant since the child-entity can be easily 
fetched using the parent entity identifier.
DONE - 65. Fix bug with big avatars in messages page on small screens.
DONE - 85. Fix layout of the TitlePage for mobile devices.
DONE - 45. Add filters to Books page.
DONE - 46. Add filters to Authors page.
DONE - 56. Add help page.
DONE - 97. Add rating field to the book item on Books page.
DONE - 11. Add "forgot your password?" functional to login form.
DONE - 99. Fix bug in "Forgot your password?" logic. When user receives an email he should accept password changing and only after this action password will change to random value.
DONE - 75. Set jwt signing key in application.properties. Inject Environment in every bean, which use jwt. We should remove signing key from src.
DONE - 96. Implement text diff functional like on github to allow reader find new changes in the author book.
DONE - 66. Mark as unread whole chat to determine where unread messages are placed.
DONE - 99. Create layouts for ads.
DONE - 23. Fix bug with subcomment if quoted comment is placed on another page (probably it will be hidden in this case). You should create new action for receiving subcomment by id I guess.
DONE - 29. Support full localization mechanism.
DONE - 103. Add billing sql schema for user balance.
DONE - 104. Add BalancePage component. When user click on "Balance" button in the NavBar he should move to BalancePage. On this page should be table with all operations with user balance. Also it should be textfield for writing amount and button "Top up the balance".
DONE - 108. Add ConfirmPaymentForm. It should show the name of the item, current balance. If not enough money it should be a link to user balance page.
DONE - 102. Add limit for premium user. After a year premium account should be prolongated.
DONE - 108. Change all java.util.Date to LocalDate and LocalDateTime for JPA mappings. Use convertor for that.
DONE - 108. Press the footer to the bottom even if there is not enough content on the page.
DONE - 109. Add balance recharge mechanism to the frontend.
DONE - 106. Add "Give a gift" button under the author avatar on ShortAuthorInfo component. When click on that button user should be moved to GiftPage.
DONE - 31. Create internal user balance. User can convert real money via pay gateway into the internal credits. These credits allow to:
                   DONE - buy premium account;
                   DONE - buy hidden books of other users. After user buy hidden book it becomes visible for him and needed amount of credits will transmit to other user;
		   DONE - buy gifts and present them to authors. Each gift give some rating or credits to author.
DONE - 107. Create GiftPage. On this page user should see some gifts. Every gift gives some rating or/and credits to author which will be gifted. Some gifts are without cost, some with cost.
DONE - 101. Don't send an empty comment for the book.
DONE - 113. Hide "Give a gift" button on AuthorGiftPage if author === me.
DONE - 110. Add author's gift page. Add "Show author's gifts" button in the SectionPage.
DONE - 30. Add concept of the premium account. It should allow:
                   DONE - to use more large photos and book texts;
                   DONE - gold highlight of the author panel and all of the author books in all rating lists;
                   DONE - higher prioritet in rating and in search. This means that if default account and premium account has the same values/rating then the premium account will be sorted higher;
                   DONE - additional tools in account: text analyzer, create private books, pdf convertation of the book and so on;
		   DONE - disable the ads.
